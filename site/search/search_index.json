{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"day-1/","title":"Conhecendo o Terraform","text":""},{"location":"day-1/#o-que-e-o-terraform","title":"O que \u00e9 o Terraform?","text":"<p>Terraform \u00e9 uma ferramenta de c\u00f3digo aberto para provisionamento de infraestrutura como c\u00f3digo (IaC). Ele permite que voc\u00ea defina e gerencie a infraestrutura de nuvem em um formato leg\u00edvel por humanos e m\u00e1quinas, usando uma linguagem de configura\u00e7\u00e3o chamada HCL (HashiCorp Configuration Language).</p>"},{"location":"day-1/#o-que-e-hcl","title":"O que \u00e9 HCL?","text":"<p>HCL \u00e9 a linguagem de configura\u00e7\u00e3o usada pelo Terraform. \u00c9 uma linguagem declarativa, o que significa que voc\u00ea descreve o estado desejado da sua infraestrutura, e o Terraform se encarrega de chegar a esse estado. A HCL usa uma sintaxe simples e leg\u00edvel, com blocos, argumentos e identificadores.</p>"},{"location":"day-1/#o-que-e-o-statefile","title":"O que \u00e9 o Statefile?","text":"<p>O statefile \u00e9 um arquivo JSON que armazena o estado atual da infraestrutura gerenciada pelo Terraform. Ele mapeia os recursos do Terraform para os recursos reais na nuvem. O statefile \u00e9 crucial para que o Terraform possa determinar as altera\u00e7\u00f5es necess\u00e1rias para alcan\u00e7ar o estado desejado.</p>"},{"location":"day-1/#infraestrutura-mutavel-vs-imutavel","title":"Infraestrutura Mut\u00e1vel vs. Imut\u00e1vel","text":"<ul> <li>Infraestrutura Mut\u00e1vel: \u00c9 a abordagem tradicional, onde os servidores e recursos s\u00e3o atualizados no local. Isso pode levar a inconsist\u00eancias e dificuldades de gerenciamento \u00e0 medida que a infraestrutura cresce.</li> <li>Infraestrutura Imut\u00e1vel: \u00c9 uma abordagem moderna, onde os servidores e recursos s\u00e3o substitu\u00eddos por novos quando necess\u00e1rio. Isso garante consist\u00eancia e facilita o gerenciamento, pois cada recurso tem um estado conhecido e imut\u00e1vel.</li> </ul>"},{"location":"day-1/#conceitos-basicos-de-cloud","title":"Conceitos B\u00e1sicos de Cloud","text":""},{"location":"day-1/#providers-regiao-e-zona","title":"Providers, Regi\u00e3o e Zona","text":"<ul> <li>Providers: S\u00e3o plugins que permitem que o Terraform se integre com diferentes provedores de nuvem, como AWS, Azure e GCP.</li> <li>Regi\u00e3o: \u00c9 uma localiza\u00e7\u00e3o geogr\u00e1fica onde os recursos da nuvem s\u00e3o provisionados.</li> <li>Zona: \u00c9 uma subdivis\u00e3o dentro de uma regi\u00e3o, que oferece isolamento e redund\u00e2ncia.</li> </ul>"},{"location":"day-1/#bucket-para-garantir-o-mesmo-estado","title":"Bucket para garantir o mesmo estado","text":"<p>Para garantir que a equipe utilize o mesmo estado do Terraform, \u00e9 essencial usar um bucket centralizado (como o S3 da AWS) para armazenar o statefile. Isso garante que todos os membros da equipe estejam trabalhando com a mesma vers\u00e3o do estado da infraestrutura.</p>"},{"location":"day-1/#criando-um-usuario-iam-na-aws","title":"Criando um usu\u00e1rio IAM na AWS","text":"<p>Para iniciar o uso do Terraform na AWS, voc\u00ea precisa criar um usu\u00e1rio IAM com permiss\u00f5es suficientes para gerenciar os recursos da AWS. Para isso voc\u00ea pode usar o console da AWS ou a CLI.</p> <p>Para criar um usu\u00e1rio IAM utilizando a CLI, voc\u00ea pode usar o seguinte comando:</p> <p>Exemplo:</p> <pre><code>aws iam create-user --user-name meu-usuario\naws iam attach-user-policy --user-name meu-usuario --policy-arn arn:aws:iam::aws\n/AdministratorAccess\naws iam create-access-key --user-name meu-usuario\n</code></pre> <p>Este comando ir\u00e1 criar um usu\u00e1rio IAM chamado <code>meu-usuario</code>, anexar a pol\u00edtica <code>AdministratorAccess</code> a ele e criar uma chave de acesso para ele. Guarde a chave de acesso e a chave secreta em um local seguro, pois elas ser\u00e3o usadas para autenticar o Terraform na AWS.</p> <p>Esse caso de uso \u00e9 para usu\u00e1rios que j\u00e1 possuem um usuario e desejam criar um novo usuario para o Terraform, caso voc\u00ea n\u00e3o tenha um usuario, utilize a op\u00e7\u00e3o de criar um usuario no console da AWS.</p>"},{"location":"day-1/#criando-um-bucket-s3-com-acesso-publico-bloqueado","title":"Criando um bucket S3 com acesso p\u00fablico bloqueado","text":"<p>Para criar um bucket S3 com acesso p\u00fablico bloqueado, voc\u00ea pode usar a CLI da AWS ou o console da AWS.</p> <p>Exemplo (Console):</p> <ol> <li> <p>Acessar o S3:</p> </li> <li> <p>Fa\u00e7a login na sua conta da AWS.</p> </li> <li> <p>No menu de servi\u00e7os, procure por \"S3\" e selecione-o.</p> </li> <li> <p>Criar um Bucket:</p> </li> <li> <p>Clique no bot\u00e3o \"Criar bucket\".</p> </li> <li> <p>Forne\u00e7a um nome \u00fanico para o seu bucket. Esse nome \u00e9 global, ou seja, n\u00e3o pode ser repetido.</p> </li> <li> <p>Selecione a regi\u00e3o onde deseja armazenar o bucket.</p> </li> <li> <p>Bloquear Acesso P\u00fablico:</p> </li> <li> <p>Na se\u00e7\u00e3o \"Bloquear acesso p\u00fablico\", ative todas as op\u00e7\u00f5es. Isso garante que o acesso p\u00fablico ao bucket seja bloqueado por padr\u00e3o.</p> </li> <li> <p>Clique em \"Criar bucket\".</p> </li> <li> <p>Verificar as Configura\u00e7\u00f5es:</p> </li> <li> <p>Na lista de buckets, clique no nome do bucket que voc\u00ea acabou de criar.</p> </li> <li>V\u00e1 para a aba \"Permiss\u00f5es\".</li> <li>Na se\u00e7\u00e3o \"Bloquear acesso p\u00fablico\", verifique se todas as op\u00e7\u00f5es est\u00e3o ativadas.</li> </ol> <p>Observa\u00e7\u00f5es:</p> <ul> <li>Bloquear o acesso p\u00fablico \u00e9 uma pr\u00e1tica de seguran\u00e7a importante para proteger seus dados.</li> <li>Voc\u00ea pode conceder acesso a usu\u00e1rios ou servi\u00e7os espec\u00edficos por meio de pol\u00edticas de bucket, ACLs (listas de controle de acesso) e fun\u00e7\u00f5es do IAM.</li> <li>Se voc\u00ea precisar de acesso p\u00fablico para algum conte\u00fado espec\u00edfico, \u00e9 poss\u00edvel criar uma pol\u00edtica de bucket que permita acesso a objetos espec\u00edficos.</li> </ul> <p>Exemplo (CLI):</p> <pre><code>aws s3api create-bucket --bucket meu-bucket --region us-west-2 --create-bucket-configuration LocationConstraint=us-west-2 --acl private\n</code></pre>"},{"location":"day-1/#entendendo-o-terraform","title":"Entendendo o Terraform","text":""},{"location":"day-1/#hcl-hashicorp-configuration-language","title":"HCL (HashiCorp Configuration Language)","text":"<p>HCL \u00e9 a linguagem de configura\u00e7\u00e3o usada pelo Terraform para definir a infraestrutura como c\u00f3digo.</p>"},{"location":"day-1/#argumentos","title":"Argumentos","text":"<p>S\u00e3o valores passados para um recurso ou m\u00f3dulo. No exemplo <code>image_id = \"abc123\"</code>, \"image_id\" \u00e9 o argumento e \"abc123\" \u00e9 o valor.</p>"},{"location":"day-1/#blocos","title":"Blocos","text":"<p>S\u00e3o cont\u00eaineres para outros conte\u00fados, como argumentos ou outros blocos aninhados. O exemplo mostra um bloco <code>network_interface</code> dentro do recurso <code>aws_instance</code>.</p> <pre><code>resource \"aws_instance\" \"web\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n\n  network_interface {\n    network_interface_id = \"eni-123456\"\n    device_index         = 0\n  }\n}\n</code></pre>"},{"location":"day-1/#identificadores","title":"Identificadores","text":"<p>S\u00e3o nomes usados para referenciar recursos, vari\u00e1veis, etc. Eles devem seguir regras espec\u00edficas de codifica\u00e7\u00e3o e termina\u00e7\u00e3o de linha.</p> <pre><code>resource \"aws_instance\" \"web\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n}\n</code></pre>"},{"location":"day-1/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Para instalar o Terraform, consulte a documenta\u00e7\u00e3o oficial.</p>"},{"location":"day-1/#comandos-basicos","title":"Comandos B\u00e1sicos","text":"<ul> <li><code>terraform init --upgrade</code>: Inicializa o diret\u00f3rio de trabalho e baixa os plugins necess\u00e1rios. <code>--upgrade</code> garante que os plugins estejam atualizados.</li> <li><code>terraform plan</code>: Mostra um plano de execu\u00e7\u00e3o, listando as a\u00e7\u00f5es que o Terraform ir\u00e1 realizar.</li> <li><code>terraform apply</code>: Executa o plano de execu\u00e7\u00e3o, criando ou modificando a infraestrutura.</li> <li><code>terraform destroy</code>: Destr\u00f3i a infraestrutura criada pelo Terraform.</li> </ul>"},{"location":"day-1/#autenticacao","title":"Autentica\u00e7\u00e3o","text":""},{"location":"day-1/#usando-o-provider","title":"Usando o Provider","text":"<p>O bloco <code>provider \"aws\"</code> define as credenciais de acesso e a regi\u00e3o da AWS.</p> <pre><code>provider \"aws\" {\n  region     = \"us-west-2\"\n  access_key = \"my-access-key\"\n  secret_key = \"my-secret-key\"\n}\n</code></pre> <p>Por quest\u00f5es de seguran\u00e7a, \u00e9 recomend\u00e1vel n\u00e3o armazenar as credenciais diretamente no c\u00f3digo. Em vez disso, voc\u00ea pode usar vari\u00e1veis de ambiente, arquivos de configura\u00e7\u00e3o ou servi\u00e7os de autentica\u00e7\u00e3o.</p>"},{"location":"day-1/#usando-variaveis-de-ambiente","title":"Usando Vari\u00e1veis de Ambiente","text":"<p>\u00c9 poss\u00edvel definir as vari\u00e1veis <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code> e <code>AWS_REGION</code> no ambiente para autenticar o Terraform.</p> <pre><code>export AWS_ACCESS_KEY_ID=\"my-access-key\"\nexport AWS_SECRET_ACCESS=\"my-secret-key\"\nexport AWS_REGION=\"us-west-2\"\n</code></pre> <p>Depois de exportar suas vari\u00e1veis de ambiente, o Terraform usar\u00e1 essas credenciais para se autenticar na AWS. Lembre-se de proteger suas credenciais e n\u00e3o compartilh\u00e1-las publicamente.</p>"},{"location":"day-1/#backend-remoto","title":"Backend remoto","text":"<p>O backend remoto permite armazenar o statefile em um local centralizado, como um bucket S3. Isso facilita o trabalho em equipe e garante a consist\u00eancia do estado da infraestrutura.</p> <p>Exemplo de configura\u00e7\u00e3o de backend remoto:</p> <pre><code>terraform {\n  backend \"s3\" {\n    bucket = \"my-terraform-state\"\n    key    = \"terraform.tfstate\"\n    region = \"us-west-2\"\n  }\n</code></pre> <p>Adicione essa configura\u00e7\u00e3o ao seu arquivo <code>.tf</code> para usar um backend remoto.</p> <p>Caso o terraform j\u00e1 tenha sido inicializado com um backend local, voc\u00ea pode migrar para um backend remoto, normalmente ao utilizar o <code>terraform init</code> ele ir\u00e1 perguntar se deseja levar para o seu backend o estado local, caso n\u00e3o pergunte, voc\u00ea pode for\u00e7ar a migra\u00e7\u00e3o com o comando <code>terraform init -reconfigure</code>. Em caso de erro use o comando <code>terraform init -migrate-state</code>.</p>"},{"location":"day-1/#o-que-sao-os-providers-no-terraform","title":"O que s\u00e3o os providers no Terraform?","text":"<p>Os providers s\u00e3o plugins que permitem que o Terraform interaja com diferentes provedores de nuvem, como AWS, Azure, GCP, etc. Cada provedor tem seu pr\u00f3prio plugin, que fornece os recursos e a l\u00f3gica necess\u00e1ria para gerenciar a infraestrutura na nuvem.</p> <p>Para usar um provedor no Terraform, voc\u00ea precisa configurar as credenciais de acesso e a regi\u00e3o do provedor. Isso permite que o Terraform se autentique e provisione recursos na nuvem.</p> <p>Exemplo de configura\u00e7\u00e3o de um provedor AWS:</p> <pre><code>provider \"aws\" {\n  region     = \"us-west-2\"\n  access_key = \"my-access\n  secret_key\n  = \"my-secret key\"\n}\n</code></pre> <p>Neste exemplo, o bloco <code>provider \"aws\"</code> configura o provedor AWS com a regi\u00e3o <code>us-west-2</code> e as credenciais de acesso fornecidas. Isso permite que o Terraform provisione recursos na AWS.</p> <p>Outra forma de autenticar o Terraform \u00e9 utilizando vari\u00e1veis de ambiente, como <code>AWS_ACCESS_KEY_ID</code> e <code>AWS_SECRET_ACCESS_KEY</code>. Isso evita a exposi\u00e7\u00e3o de credenciais no c\u00f3digo e facilita a gest\u00e3o de seguran\u00e7a.</p> <pre><code>export AWS_ACCESS_KEY_ID=\"my-access-key\"\nexport AWS_SECRET_ACCESS_KEY=\"my-secret-key\"\nexport AWS_REGION=\"us-west-2\"\n</code></pre>"},{"location":"day-1/#utilizando-o-alias-para-multiplos-providers","title":"Utilizando o alias para m\u00faltiplos providers","text":"<p>Com essa op\u00e7\u00e3o, \u00e9 poss\u00edvel utilizar m\u00faltiplos providers de um mesmo tipo, por exemplo, dois providers AWS, um para cada regi\u00e3o. Para isso, \u00e9 necess\u00e1rio utilizar o alias para diferenciar os providers.</p> <pre><code>terraform {\n  backend \"s3\" {\n    bucket = \"descomplicando-terraform-turma-2024\"\n    key    = \"aula_backend\"\n    region = \"us-east-1\"\n  }\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n  }\n}\n\n# Configure the AWS Provider\nprovider \"aws\" {\n  region = \"us-east-2\"\n}\n\nprovider \"aws\" {\n  alias  = \"west\"\n  region = \"us-west-2\"\n}\n</code></pre>"},{"location":"day-1/#o-que-e-e-como-usar-variaveis-no-terraform","title":"O que \u00e9 e como usar vari\u00e1veis no Terraform?","text":"<p>\u00c9 a possibilidade de definir valores din\u00e2micos para os recursos, evitando a repeti\u00e7\u00e3o de c\u00f3digo e facilitando a manuten\u00e7\u00e3o. Al\u00e9m disso, as informa\u00e7\u00f5es que precisam ser alteradas com frequ\u00eancia nao ficam fixas no c\u00f3digo - o chamado hardcode -.</p> <p>Podemos modificar o comportamento do c\u00f3digo de acordo com o ambiente, como por exemplo, alterar o nome de uma inst\u00e2ncia EC2 de acordo com as vari\u00e1veis de ambiente, de distintas maneiras.</p>"},{"location":"day-1/#declarando-variaveis","title":"Declarando vari\u00e1veis","text":"<p>\u00c9 poss\u00edvel declarar vari\u00e1veis no arquivo <code>variables.tf</code> ou diretamente no arquivo <code>.tf</code> que est\u00e1 sendo utilizado no bloco chamado <code>variable</code>.</p> <pre><code>variable \"instance_name\" {\n  description = \"O nome da inst\u00e2ncia EC2\"\n  type        = string\n  default     = \"my-instance\"\n}\n</code></pre> <p>As principais formas de declarar vari\u00e1veis s\u00e3o:</p> <ul> <li>Linha de comando: Usando a flag <code>-var</code> para passar valores diretamente na linha de comando.</li> </ul> <pre><code>terraform plan -out plano -var=\"instance_name=my-instance\"\n</code></pre> <ul> <li>Arquivo de vari\u00e1veis: Criando um arquivo de vari\u00e1veis separado e passando-o para o Terraform no bloco <code>variables</code>.</li> </ul> <pre><code>variable \"instance_name\" {\n  type = string\n  description = \"O nome da inst\u00e2ncia EC2\"\n}\n</code></pre> <p>No arquivo de vari\u00e1veis voce pode definir um valor como sensivel, para isso basta adicionar o atributo <code>sensitive = true</code> na declara\u00e7\u00e3o da vari\u00e1vel.</p> <ul> <li>Vari\u00e1veis de ambiente: Usando vari\u00e1veis de ambiente para definir valores.</li> </ul> <pre><code>export TF_VAR_instance_name=my-instance\n</code></pre> <ul> <li>Utilizando o arquivo <code>terraform.tfvars</code> para definir as vari\u00e1veis. O arquivo pode ter o seguinte conte\u00fado:</li> </ul> <pre><code>instance_name = \"my-instance\"\n</code></pre> <p>Para utilizar o arquivo de <code>terraform.tfvars</code>:</p> <pre><code>terraform plan -out plano -var-file=\"testing.tfvars\"\n</code></pre> <p>Outra forma de utilizar o <code>.tfvars</code> \u00e9 atrav\u00e9s do <code>auto.tfvars</code>, assim:</p> <pre><code>terraform plan -out plano\n</code></pre> <p>O terraform ir\u00e1 buscar automaticamente o arquivo <code>auto.tfvars</code> ou <code>terraform.tfvars</code> para carregar as vari\u00e1veis.</p> <p>Caso voc\u00ea os distintos arquivos de declara\u00e7\u00e3o de vari\u00e1veis, o Terraform ir\u00e1 seguir a seguinte ordem de import\u00e2ncia para carregar as vari\u00e1veis:</p> <ol> <li>Vari\u00e1veis de ambiente.</li> <li>Utilizando -var e -var-file na linha de comando.</li> <li>Utilizando os arquivos que terminam com <code>.auto.tfvars</code>.</li> <li>Utilizando os arquivos que terminam com <code>.tfvars</code>.</li> </ol>"},{"location":"day-2/","title":"O state file do Terraform","text":"<p>O Terraform cria um arquivo chamado <code>terraform.tfstate</code> que armazena o estado atual da infraestrutura gerenciada por ele. Esse arquivo \u00e9 importante para que o Terraform saiba o que j\u00e1 foi criado e o que precisa ser atualizado ou removido. Ele mapeia todos os recursos criados e suas configura\u00e7\u00f5es.</p> <p>Quando voc\u00ea executa o comando <code>terraform apply</code>, o Terraform cria ou atualiza a infraestrutura e atualiza o arquivo <code>terraform.tfstate</code> com as informa\u00e7\u00f5es dos recursos criados. Se voc\u00ea remover esse arquivo, o Terraform n\u00e3o saber\u00e1 o que j\u00e1 foi criado e tentar\u00e1 criar tudo novamente.</p> <p>Por isso, \u00e9 importante n\u00e3o remover o arquivo <code>terraform.tfstate</code> manualmente. Se voc\u00ea quiser come\u00e7ar do zero, \u00e9 recomendado usar o comando <code>terraform destroy</code> para remover todos os recursos criados e, em seguida, remover o arquivo <code>terraform.tfstate</code>.</p> <p>Al\u00e9m disso, o arquivo <code>terraform.tfstate</code> cont\u00e9m informa\u00e7\u00f5es sens\u00edveis, como senhas e chaves de acesso, que n\u00e3o devem ser expostas. Por isso, \u00e9 importante proteger esse arquivo e n\u00e3o compartilh\u00e1-lo publicamente.</p> <p>Por padr\u00e3o, o arquivo <code>terraform.tfstate</code> \u00e9 armazenado localmente no diret\u00f3rio onde voc\u00ea est\u00e1 executando o Terraform. No entanto, \u00e9 poss\u00edvel configurar o Terraform para armazenar o estado em um local remoto, como um bucket do S3 ou um servi\u00e7o de armazenamento de estado.</p>"},{"location":"day-2/#backend-remoto","title":"Backend remoto","text":"<p>Para configurar o armazenamento remoto do estado, voc\u00ea pode usar o bloco <code>backend</code> no arquivo de configura\u00e7\u00e3o do Terraform. Por exemplo, para armazenar o estado no S3, voc\u00ea pode adicionar o seguinte bloco ao seu arquivo de configura\u00e7\u00e3o:</p> <pre><code>// This Terraform configuration sets up the backend configuration for storing the state file in an S3 bucket.\n\nterraform {\n    backend \"s3\" {\n        bucket = \"terraform2024-granato\"\n        key    = \"state\"\n        region = \"us-east-1\"\n    }\n}\n</code></pre> <p>Isso far\u00e1 com que o Terraform armazene o estado no bucket do S3 especificado. Dessa forma, o estado estar\u00e1 seguro e acess\u00edvel a partir de qualquer lugar.</p> <p>Lembre-se de que \u00e9 importante proteger o acesso ao bucket do S3 para garantir a seguran\u00e7a das informa\u00e7\u00f5es contidas no estado. Voc\u00ea pode configurar as permiss\u00f5es de acesso ao bucket para restringir quem pode ler e gravar o estado.</p>"},{"location":"day-2/#usando-o-dynamodb-para-bloqueio-de-estado","title":"Usando o DynamoDB para bloqueio de estado","text":"<p>O uso do DynamoDB para bloqueio de estado \u00e9 uma pr\u00e1tica recomendada ao usar o Terraform com um backend remoto. O DynamoDB \u00e9 um servi\u00e7o de banco de dados NoSQL totalmente gerenciado que fornece bloqueio de estado para garantir que apenas um usu\u00e1rio ou processo possa modificar o estado do Terraform por vez.</p> <p>Para configurar o bloqueio de estado com o DynamoDB, voc\u00ea pode adicionar o seguinte bloco ao seu arquivo de configura\u00e7\u00e3o do Terraform:</p> <pre><code>// This Terraform configuration sets up the DynamoDB table for state locking.\nterraform {\n  backend \"s3\" {\n    bucket         = \"terraform2024-granato\"\n    key            = \"aula_backend\"\n    region         = \"us-east-1\"\n    dynamodb_table = \"terraform2024-granato\"\n  }\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n  }\n}\n</code></pre> <p>Com o bloco acima, o Terraform usar\u00e1 o DynamoDB para bloquear o estado do Terraform, garantindo que apenas um usu\u00e1rio ou processo possa modificar o estado por vez. Isso evita conflitos e garante a consist\u00eancia do estado.</p>"},{"location":"day-2/#utilizando-workspaces-no-terraform","title":"Utilizando workspaces no Terraform","text":"<p>Os workspaces no Terraform s\u00e3o uma maneira de organizar e gerenciar diferentes ambientes de infraestrutura dentro de um mesmo diret\u00f3rio de configura\u00e7\u00e3o. Cada workspace tem seu pr\u00f3prio estado e pode ser usado para gerenciar ambientes de desenvolvimento, teste, produ\u00e7\u00e3o, entre outros.</p> <p>Para criar um novo workspace, voc\u00ea pode usar o comando <code>terraform workspace new &lt;nome&gt;</code>. Por exemplo, para criar um workspace chamado <code>dev</code>, voc\u00ea pode executar o seguinte comando:</p> <pre><code>terraform workspace new dev\n</code></pre> <p>Depois de criar um workspace, voc\u00ea pode alternar entre os workspaces usando o comando <code>terraform workspace select &lt;nome&gt;</code>. Por exemplo, para alternar para o workspace <code>dev</code>, voc\u00ea pode executar o seguinte comando:</p> <pre><code>terraform workspace select dev\n</code></pre> <p>\u00c9 importante ter aten\u00e7\u00e3o ao usar workspaces, pois eles compartilham o mesmo diret\u00f3rio de configura\u00e7\u00e3o e podem causar conflitos se n\u00e3o forem usados corretamente. Certifique-se de que cada workspace tenha suas pr\u00f3prias configura\u00e7\u00f5es e vari\u00e1veis para evitar conflitos entre os ambientes.</p> <p>Se voc\u00ea est\u00e1 criando recursos em uma mesma regi\u00e3o, mas utilizando workspaces, atente-se ao nome dos recursos, pois o Terraform n\u00e3o permite a cria\u00e7\u00e3o de recursos com o mesmo nome em workspaces diferentes.</p>"},{"location":"day-2/#import-de-recursos-existentes","title":"Import de recursos existentes","text":"<p>O Terraform permite importar recursos existentes em um estado gerenciado por ele. Isso \u00e9 \u00fatil quando voc\u00ea deseja gerenciar recursos que foram criados fora do Terraform ou que foram criados manualmente.</p> <p>Para importar um recurso existente, voc\u00ea pode usar o comando <code>terraform import &lt;tipo&gt;.&lt;nome&gt; &lt;id&gt;</code>. Por exemplo, para importar uma inst\u00e2ncia EC2 existente, voc\u00ea pode executar o seguinte comando:</p> <pre><code>terraform import aws_instance.web i-1234567890abcdef0\n</code></pre> <p>Isso importar\u00e1 a inst\u00e2ncia EC2 com o ID <code>i-1234567890abcdef0</code> para o estado do Terraform, permitindo que voc\u00ea gerencie esse recurso com o Terraform.</p> <p>Para gerenciar recursos importados, voc\u00ea precisar\u00e1 adicionar a defini\u00e7\u00e3o do recurso ao seu arquivo de configura\u00e7\u00e3o do Terraform. Certifique-se de que a defini\u00e7\u00e3o corresponda ao recurso importado para evitar conflitos.</p> <p>Lembre-se de que o Terraform n\u00e3o importa automaticamente os recursos existentes em um estado gerenciado por ele. Voc\u00ea precisar\u00e1 importar manualmente cada recurso que deseja gerenciar com o Terraform.</p> <p>Existem algumas limita\u00e7\u00f5es ao importar recursos existentes, como a impossibilidade de importar recursos que foram criados com m\u00f3dulos do Terraform ou recursos que dependem de outros recursos que n\u00e3o foram importados. Certifique-se de verificar a documenta\u00e7\u00e3o do Terraform para obter mais informa\u00e7\u00f5es sobre as limita\u00e7\u00f5es de importa\u00e7\u00e3o de recursos existentes.</p>"},{"location":"day-2/#um-exercicio-para-fixacao","title":"Um exercicio para fixa\u00e7\u00e3o","text":"<ol> <li>Execute o comando terraform import aws_instance.web id_da_instancia para importar uma inst\u00e2ncia EC2 existente para o estado do Terraform. O terraform ir\u00e1 reclamar que o recurso n\u00e3o existe na configura\u00e7\u00e3o, altere seu arquivo <code>import.tf</code> para a sugest\u00e3o do terraform e execute o comando novamente.</li> </ol> <pre><code>Error: resource address \"aws_instance.web\" does not exist in the configuration.\n\nBefore importing this resource, please create its configuration in the root module. For example:\n\nresource \"aws_instance\" \"web\" {\n  # (resource arguments)\n}\n</code></pre> <pre><code>terraform import aws_instance.web i-03101d13a03d63f08\n</code></pre> <p>A sa\u00edda do comando ser\u00e1 algo parecido com:</p> <pre><code>aws_instance.web: Importing from ID \"i-03101d13a03d63f08\"...\naws_instance.web: Import prepared!\n  Prepared aws_instance for import\naws_instance.web: Refreshing state... [id=i-03101d13a03d63f08]\n\nImport successful!\n\nThe resources that were imported are shown above. These resources are now in\nyour Terraform state and will henceforth be managed by Terraform.\n</code></pre> <ol> <li>Execute o comando terraform state pull para visualizar o estado atual do Terraform e verificar se a inst\u00e2ncia EC2 foi importada corretamente.</li> </ol> <pre><code>terraform state pull &gt; state.tfstate\n</code></pre> <p>Agora a inst\u00e2ncia EC2 foi importada para o estado do Terraform e voc\u00ea pode gerenci\u00e1-la com o Terraform.</p> <ol> <li>Adicione a defini\u00e7\u00e3o do recurso aws_instance ao seu arquivo de configura\u00e7\u00e3o do Terraform para gerenciar a inst\u00e2ncia importada. Certifique-se de que a defini\u00e7\u00e3o corresponda ao recurso importado para evitar conflitos.</li> </ol> <pre><code>resource \"aws_instance\" \"web\" {\n  ami           = \"ami-04b70fa74e45c3917\"\n  instance_type = \"t2.micro\"\n}\n</code></pre> <p>O terraform exige que voc\u00ea especifique o tipo de inst\u00e2ncia e a AMI, ent\u00e3o voc\u00ea pode adicionar essas informa\u00e7\u00f5es ao arquivo <code>import.tf</code>. Voc\u00ea pode verificar o seu arquivo de estado para obter essas informa\u00e7\u00f5es.</p> <ol> <li>Execute o comando terraform plan para verificar as altera\u00e7\u00f5es propostas pelo Terraform.</li> </ol> <pre><code>terraform plan\n</code></pre> <p>A sa\u00edda do comando ser\u00e1 algo parecido com:</p> <pre><code>Terraform will perform the following actions:\n\n  # aws_instance.web will be updated in-place\n  ~ resource \"aws_instance\" \"web\" {\n        id                                   = \"i-03101d13a03d63f08\"\n      ~ tags                                 = {\n          - \"Name\" = \"granato\" -&gt; null\n        }\n      ~ tags_all                             = {\n          - \"Name\" = \"granato\" -&gt; null\n        }\n      + user_data_replace_on_change          = false\n        # (37 unchanged attributes hidden)\n\n        # (8 unchanged blocks hidden)\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n</code></pre> <p>O plano est\u00e1 indicando que a tag \"Name\" ser\u00e1 modificada. Se voc\u00ea deseja manter a tag, voc\u00ea pode adicionar a tag ao seu arquivo <code>import.tf</code>, verificando no arquivo de estado a tag atual. Execute o <code>terraform plan</code> novamente para verificar se a tag ser\u00e1 mantida.</p> <p>A sa\u00edda do comando ser\u00e1 algo parecido com:</p> <pre><code>aws_instance.web: Refreshing state... [id=i-03101d13a03d63f08]\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your configuration and found no differences, so no\nchanges are needed.\n</code></pre> <p>Agora a inst\u00e2ncia EC2 foi importada e est\u00e1 sendo gerenciada pelo Terraform. Voc\u00ea pode continuar a gerenciar a inst\u00e2ncia EC2 com o Terraform, aplicando altera\u00e7\u00f5es e mantendo o estado atualizado.</p>"},{"location":"day-2/#uso-avancado-do-import-no-terraform","title":"Uso avancado do import no Terraform","text":"<p>Agora existe um novo bloco de configura\u00e7\u00e3o chamado <code>import</code> que permite importar recursos existentes diretamente para o estado do Terraform. Isso facilita a importa\u00e7\u00e3o de recursos existentes e evita a necessidade de usar o comando <code>terraform import</code>.</p> <p>Para usar o bloco <code>import</code>, voc\u00ea pode adicionar a seguinte configura\u00e7\u00e3o ao seu arquivo de configura\u00e7\u00e3o do Terraform:</p> <pre><code>import {\n  to = aws_instance.web\n  id = \"i-03101d13a03d63f08\"\n}\n\nresource \"aws_instance\" \"web\" {\n  ami           = \"ami-04b70fa74e45c3917\"\n  instance_type = \"t2.micro\"\n  tags = {\n    Name = \"granato\"\n  }\n</code></pre> <p>Para utilizarmos o <code>import</code> dessa forma, precisamos remover o estado atual. Liste o estado atual com o comando <code>terraform state list</code> e remova o estado da inst\u00e2ncia EC2 com o comando <code>terraform state rm aws_instance.web</code>.</p> <pre><code>terraform state rm aws_instance.web\n</code></pre> <p>Agora essa inst\u00e2ncia n\u00e3o est\u00e1 mais no estado do Terraform e podemos adicionar o bloco <code>import</code> ao nosso arquivo <code>import.tf</code> e executar o comando <code>terraform plan</code> para verificar as altera\u00e7\u00f5es propostas pelo Terraform.</p> <pre><code>terraform plan\n</code></pre> <p>Agora no seu output voc\u00ea o recurso chamado <code>aws_instance.web</code> com o status <code>import</code> e o Terraform ir\u00e1 importar a inst\u00e2ncia EC2 para o estado.</p> <pre><code>Plan: 1 to import, 0 to add, 0 to change, 0 to destroy.\n</code></pre> <p>Execute o comando <code>terraform apply</code> para aplicar as altera\u00e7\u00f5es e importar a inst\u00e2ncia EC2 para o estado do Terraform.</p> <pre><code>terraform apply -auto-approve\n</code></pre> <p>A sa\u00edda do comando ser\u00e1 algo parecido com:</p> <pre><code>Plan: 1 to import, 0 to add, 0 to change, 0 to destroy.\naws_instance.web: Importing... [id=i-03101d13a03d63f08]\naws_instance.web: Import complete [id=i-03101d13a03d63f08]\n\nApply complete! Resources: 1 imported, 0 added, 0 changed, 0 destroyed.\n</code></pre> <p>Agora vamos ver uma forma experimental, o generation configuration.</p> <p>Antes de iniciarmos remova o estado atual da inst\u00e2ncia EC2 com o comando <code>terraform state rm aws_instance.web</code>.</p>"},{"location":"day-2/#usando-o-gerador-de-configuracao-no-terraform","title":"Usando o gerador de configura\u00e7\u00e3o no Terraform","text":"<p>Para gerar a configura\u00e7\u00e3o do Terraform para um recurso existente, voc\u00ea pode usar o comando <code>terraform generate</code>. Isso ir\u00e1 gerar a configura\u00e7\u00e3o do Terraform para o recurso existente com base nas informa\u00e7\u00f5es dispon\u00edveis.</p> <p>O seu arquivo de configura\u00e7\u00e3o do Terraform deve conter a defini\u00e7\u00e3o do recurso que voc\u00ea deseja gerar a configura\u00e7\u00e3o.</p> <pre><code>import {\n  to = aws_instance.web\n  id = \"i-03101d13a03d63f08\"\n}\n</code></pre> <p>Execute o plano para verificar as altera\u00e7\u00f5es propostas pelo Terraform.</p> <pre><code>terraform plan\n</code></pre> <p>Ele ir\u00e1 mostrar que o seu target n\u00e3o existe e ir\u00e1 sugerir a cria\u00e7\u00e3o do recurso.</p> <pre><code>terraform plan -generate-config-out=generated.tf\n</code></pre> <p>Ele ir\u00e1 gerar um arquivo chamado <code>generated.tf</code> com a configura\u00e7\u00e3o do recurso existente. \u00c9 recomendado fazer um review do arquivo gerado para garantir que a configura\u00e7\u00e3o est\u00e1 correta.</p> <p>Use com cuidado, pois o gerador de configura\u00e7\u00e3o \u00e9 uma funcionalidade experimental e pode n\u00e3o funcionar corretamente em todos os casos. Veja o output:</p> <pre><code>Planning failed. Terraform encountered an error while generating this plan.\n\n\u2577\n\u2502 Warning: Config generation is experimental\n\u2502\n\u2502 Generating configuration during import is currently experimental, and the generated configuration format\n\u2502 may change in future versions.\n\u2575\n\u2577\n\u2502 Error: Conflicting configuration arguments\n\u2502\n\u2502   with aws_instance.web,\n\u2502   on generated.tf line 14:\n\u2502   (source code not available)\n\u2502\n\u2502 \"ipv6_address_count\": conflicts with ipv6_addresses\n</code></pre> <p>Agora execute o plano e apply novamente e veja a m\u00e1gica acontecer.</p>"},{"location":"day-2/#utilizando-outputs-e-outputs-de-um-remote-state","title":"Utilizando outputs e outputs de um remote state","text":"<p>Os outputs no Terraform s\u00e3o uma maneira de expor informa\u00e7\u00f5es sobre os recursos criados para serem usadas por outros recursos ou para serem exibidas ao usu\u00e1rio. Eles s\u00e3o \u00fateis para fornecer informa\u00e7\u00f5es sobre o estado da infraestrutura e para compartilhar dados entre m\u00f3dulos.</p> <p>Para definir um output no Terraform, voc\u00ea pode adicionar o bloco <code>output</code> ao seu arquivo de configura\u00e7\u00e3o. Por exemplo, para expor o ID de uma inst\u00e2ncia EC2, voc\u00ea pode adicionar o seguinte bloco ao seu arquivo de configura\u00e7\u00e3o:</p> <pre><code>output \"instance_id\" {\n  value = aws_instance.web.id\n}\n</code></pre> <p>Voc\u00ea ver\u00e1 o output no final do comando <code>terraform apply</code>:</p> <pre><code>Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\n\nOutputs:\n\ninstance_ip_addr = \"172.31.34.92\"\n</code></pre>"},{"location":"day-2/#obtendo-outputs-de-um-remote-state-e-utilizando-no-seu-codigo-terraform","title":"Obtendo outputs de um remote state e utilizando no seu c\u00f3digo Terraform","text":"<p>Para obter os outputs de um estado remoto no Terraform, voc\u00ea pode usar o bloco <code>data</code> com o tipo <code>terraform_remote_state</code>. Isso permite que voc\u00ea acesse os outputs de um estado remoto e os utilize em seu c\u00f3digo Terraform.</p> <p>Para obter os outputs de um estado remoto, voc\u00ea pode adicionar o seguinte bloco ao seu arquivo de configura\u00e7\u00e3o:</p> <pre><code>data \"terraform_remote_state\" \"remote\" {\n  backend = \"s3\"\n  config = {\n    bucket = \"terraform2024-granato\"\n    key    = \"state\"\n    region = \"us-east-1\"\n  }\n}\n</code></pre> <p>Com esse bloco, voc\u00ea pode acessar os outputs do estado remoto usando a sintaxe <code>data.terraform_remote_state.remote.outputs.&lt;nome_do_output&gt;</code>. Por exemplo, para acessar o output <code>instance_id</code> do estado remoto, voc\u00ea pode usar a seguinte sintaxe:</p> <pre><code>output \"remote_instance_id\" {\n  value = data.terraform_remote_state.remote.outputs.instance_id\n}\n</code></pre> <p>Dessa forma, voc\u00ea pode acessar os outputs de um estado remoto e utiliz\u00e1-los em seu c\u00f3digo Terraform. Isso \u00e9 \u00fatil para compartilhar informa\u00e7\u00f5es entre diferentes configura\u00e7\u00f5es do Terraform e para reutilizar dados em v\u00e1rios m\u00f3dulos.</p>"},{"location":"day-3/","title":"Usando mod\u00falos no Terraform","text":"<p>Utilizar mod\u00falos no Terraform \u00e9 uma pr\u00e1tica recomendada para organizar e reutilizar c\u00f3digo. Mod\u00falos s\u00e3o um conjunto de recursos que s\u00e3o encapsulados em um diret\u00f3rio e podem ser reutilizados em diferentes partes do c\u00f3digo.</p>"},{"location":"day-3/#estrutura-de-um-modulo","title":"Estrutura de um m\u00f3dulo","text":"<p>A estrutura de um m\u00f3dulo \u00e9 bem simples, ele \u00e9 composto por um diret\u00f3rio com os arquivos <code>.tf</code> que definem os recursos que ser\u00e3o criados. A estrutura de um m\u00f3dulo pode ser a seguinte:</p> <pre><code>module\n\u2502  main.tf\n\u2502  variables.tf\n\u2502  outputs.tf\n</code></pre> <ul> <li> <p><code>main.tf</code>: Arquivo que cont\u00e9m a defini\u00e7\u00e3o dos recursos que ser\u00e3o criados.</p> </li> <li> <p><code>variables.tf</code>: Arquivo que cont\u00e9m a defini\u00e7\u00e3o das vari\u00e1veis que ser\u00e3o utilizadas no m\u00f3dulo.</p> </li> <li> <p><code>outputs.tf</code>: Arquivo que cont\u00e9m a defini\u00e7\u00e3o das sa\u00eddas que ser\u00e3o retornadas pelo m\u00f3dulo.</p> </li> </ul>"},{"location":"day-3/#utilizando-um-modulo","title":"Utilizando um m\u00f3dulo","text":"<p>Para utilizar um m\u00f3dulo em um arquivo <code>.tf</code> basta utilizar a diretiva <code>module</code> e passar o caminho do diret\u00f3rio do m\u00f3dulo. Por exemplo:</p> <pre><code>module \"example\" {\n  source = \"./module\"\n  variable1 = \"value1\"\n  variable2 = \"value2\"\n}\n</code></pre> <p>Neste exemplo, estamos utilizando o m\u00f3dulo que est\u00e1 no diret\u00f3rio <code>module</code> e passando os valores das vari\u00e1veis <code>variable1</code> e <code>variable2</code>.</p>"},{"location":"day-3/#organizando-modulos","title":"Organizando m\u00f3dulos","text":"<p>Para organizar os m\u00f3dulos em um projeto Terraform, \u00e9 recomendado criar um diret\u00f3rio chamado <code>modules</code> e dentro dele criar um diret\u00f3rio para cada m\u00f3dulo. Por exemplo:</p> <pre><code>modules\n\u2502 module1\n\u2502 module2\n\u2502 module3\n</code></pre> <p>Dessa forma, \u00e9 poss\u00edvel organizar os m\u00f3dulos de forma mais clara e reutiliz\u00e1vel. Normalmente os arquivos <code>.tf</code> de cada m\u00f3dulo s\u00e3o <code>provider.tf</code>, <code>variables.tf</code>, <code>main.tf</code> e <code>outputs.tf</code>.</p> <p>No m\u00f3dulo raiz do projeto crie um arquivo <code>main.tf</code> e utilize a diretiva <code>module</code> para chamar os m\u00f3dulos que deseja utilizar.</p> <p>No m\u00f3dulo raiz voc\u00ea pode chamar mais de um m\u00f3dulo, por exemplo:</p> <pre><code>module \"module1\" {\n  source = \"./modules/module1\"\n  variable1 = \"value1\"\n  variable2 = \"value2\"\n}\n\nmodule \"module2\" {\n  source = \"./modules/module2\"\n  variable1 = \"value1\"\n  variable2 = \"value2\"\n}\n</code></pre> <p>Ao usar iniciar o Terraform com o comando <code>terraform init --upgrade</code> o Terraform ir\u00e1 baixar as depend\u00eancias dos m\u00f3dulos e voc\u00ea poder\u00e1 utilizar os recursos definidos nos m\u00f3dulos. Note que no diret\u00f3rio <code>.terraform</code> ser\u00e1 criado um diret\u00f3rio chamado <code>modules</code> que cont\u00e9m os m\u00f3dulos baixados. Para maiiores informa\u00e7\u00f5es sobre os m\u00f3dulos utilizados veja o arquivo <code>modules.json</code> que \u00e9 criado no diret\u00f3rio <code>.terraform/modules</code>.</p>"},{"location":"day-3/#manipulando-informacoes-de-modulos-na-raiz","title":"Manipulando informa\u00e7\u00f5es de m\u00f3dulos na raiz","text":"<p>Para isso \u00e9 necess\u00e1rio que o seu m\u00f3dulo tenha vari\u00e1veis. Por exemplo, no m\u00f3dulo <code>module1</code> voc\u00ea pode definir uma vari\u00e1vel chamada <code>nome</code> e no m\u00f3dulo raiz voc\u00ea pode passar o valor para essa vari\u00e1vel. Por exemplo:</p> <pre><code>module \"module1\" {\n  source = \"./modules/module1\"\n  nome = \"valor\"\n}\n</code></pre> <p>Dessa forma, voc\u00ea pode passar valores para as vari\u00e1veis dos m\u00f3dulos e manipular as informa\u00e7\u00f5es de acordo com a necessidade do seu projeto.</p>"},{"location":"day-3/#movendo-states","title":"Movendo states","text":"<p>Com o <code>terraform state mv</code> \u00e9 poss\u00edvel mover um recurso de um arquivo <code>.tfstate</code> para outro. Por exemplo, se voc\u00ea tem um recurso que est\u00e1 em um arquivo <code>.tfstate</code> e deseja mover para outro arquivo, voc\u00ea pode fazer isso com o comando <code>terraform state mv</code>. Vamos ver como isso funciona na pr\u00e1tica.</p> <ol> <li>Listando states</li> </ol> <pre><code>terraform state list\n</code></pre> <ol> <li>Visualizando detalhes de um recurso</li> </ol> <pre><code>terraform state show module.projetoa.data.aws_ami.ubuntu\n</code></pre> <ol> <li>Movendo um recurso</li> </ol> <pre><code>terraform state mv aws_instance.web module.nataliagranato.aws_instance.web\n</code></pre> <p>Isso \u00e9 muito \u00fatil quando voc\u00ea possui um recursos e deseja mov\u00ea-lo para um m\u00f3dulo, por exemplo. Mover um recurso para um m\u00f3dulo \u00e9 uma pr\u00e1tica recomendada para O comando selecionado \u00e9 utilizado no contexto do Terraform, uma ferramenta de infraestrutura como c\u00f3digo (IaC) que permite definir, provisionar e gerenciar infraestrutura de TI atrav\u00e9s de arquivos de configura\u00e7\u00e3o. O comando em quest\u00e3o, <code>terraform state mv</code>, \u00e9 usado para mover um item no estado do Terraform de um local para outro. Isso pode ser necess\u00e1rio por v\u00e1rios motivos, como reorganizar recursos, refatorar m\u00f3dulos ou ajustar a estrutura do projeto.</p> <p>No exemplo espec\u00edfico:</p> <pre><code>terraform state mv aws_instance.web module.nataliagranato.aws_instance.web\n</code></pre> <p>Este comando move o recurso <code>aws_instance.web</code>, que representa uma inst\u00e2ncia da AWS (Amazon Web Services), do escopo principal do projeto Terraform para dentro de um m\u00f3dulo chamado <code>nataliagranato</code>. O <code>aws_instance.web</code> ap\u00f3s <code>module.nataliagranato.</code> indica que o recurso de inst\u00e2ncia AWS agora est\u00e1 sendo gerenciado dentro desse m\u00f3dulo.</p> <p>Mover um recurso para um m\u00f3dulo pode ser \u00fatil para melhor organizar os recursos, facilitar a reutiliza\u00e7\u00e3o de configura\u00e7\u00f5es em diferentes ambientes ou projetos, e melhorar a manuten\u00e7\u00e3o do c\u00f3digo. \u00c9 importante notar que esse comando altera apenas o estado do Terraform, sem afetar a infraestrutura real.</p> <p>\u00c9 importante salientar que ap\u00f3s mover um recurso no estado do Terraform para um mod\u00falo, \u00e9 necess\u00e1rio ajustar o c\u00f3digo do projeto para refletir essa mudan\u00e7a. Isso pode envolver a atualiza\u00e7\u00e3o de refer\u00eancias ao recurso movido, a defini\u00e7\u00e3o de vari\u00e1veis de entrada e sa\u00edda no m\u00f3dulo, e a garantia de que o c\u00f3digo do m\u00f3dulo esteja corretamente integrado ao restante do projeto.</p> <p>Execute <code>terraform plan</code> para verificar as mudan\u00e7as propostas antes de aplic\u00e1-las com <code>terraform apply</code>, garantindo que a altera\u00e7\u00e3o no estado esteja alinhada com a infraestrutura real.</p>"},{"location":"day-3/#alguns-recursos-para-melhorar-o-seu-modulo","title":"Alguns recursos para melhorar o seu m\u00f3dulo","text":"<ul> <li>Documenta\u00e7\u00e3o oficial do Terraform sobre m\u00f3dulos</li> <li>Construindo m\u00f3dulos Terraform</li> <li>Exemplo de m\u00f3dulo no GitHub</li> </ul>"},{"location":"day-3/#functions-locals-e-count","title":"Functions, locals e count","text":"<p>O funcionamento de fun\u00e7\u00f5es, locals e count em m\u00f3dulos \u00e9 o mesmo que em arquivos <code>.tf</code> comuns. Voc\u00ea pode utilizar fun\u00e7\u00f5es, locals e count em m\u00f3dulos para manipular informa\u00e7\u00f5es e recursos de acordo com a necessidade do seu projeto.</p> <ul> <li> <p>Fun\u00e7\u00f5es no Terraform</p> </li> <li> <p>Locals no Terraform</p> </li> <li> <p>Count no Terraform</p> </li> </ul> <p>O <code>hcl</code> possui diversas fun\u00e7\u00f5es embutidas que podem ser utilizadas para manipular informa\u00e7\u00f5es ou transformar dados. Por exemplo, a fun\u00e7\u00e3o <code>format</code> pode ser utilizada para formatar uma string de acordo com um padr\u00e3o espec\u00edfico. Veja um exemplo:</p> <pre><code>locals {\n  formatted_string = format(\"Hello, %s!\", var.name)\n}\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>format</code> \u00e9 utilizada para criar uma string formatada que inclui o valor da vari\u00e1vel <code>name</code>. O resultado ser\u00e1 uma string no formato <code>Hello, &lt;valor da vari\u00e1vel name&gt;!</code>.</p> <p>Al\u00e9m da fun\u00e7\u00e3o <code>format</code>, o <code>hcl</code> possui diversas outras fun\u00e7\u00f5es embutidas que podem ser utilizadas para manipular strings, n\u00fameros, listas, mapas e outros tipos de dados. Consulte a documenta\u00e7\u00e3o oficial do Terraform para obter mais informa\u00e7\u00f5es sobre as fun\u00e7\u00f5es dispon\u00edveis e como utiliz\u00e1-las.</p> <p>Vamos a outro exemplo:</p> <pre><code>locals {\n  cidr_block_subnets = cidrsubnets(aws_vpc.main.cidr_block, 8, 8)\n}\n\nresource \"aws_vpc\" \"main\" {\n  cidr_block = var.cidr_block\n}\n\nresource \"aws_subnet\" \"main\" {\n  count = 2\n  vpc_id     = aws_vpc.main.id\n  cidr_block = local.cidr_block_subnets[count.index]\n\n  tags = {\n    Name = \"Main\"\n  }\n}\n</code></pre> <ol> <li> <p>Bloco <code>locals</code>: Este bloco define uma vari\u00e1vel local chamada <code>cidr_block_subnets</code>. A fun\u00e7\u00e3o <code>cidrsubnets</code> \u00e9 utilizada para gerar uma lista de blocos CIDR para as sub-redes a partir do bloco CIDR da VPC. Os argumentos <code>8, 8</code> indicam o tamanho dos novos blocos CIDR que ser\u00e3o criados para as sub-redes.</p> </li> <li> <p>Recurso <code>aws_vpc</code> chamado <code>main</code>: Este bloco define uma VPC na AWS. O atributo <code>cidr_block</code> \u00e9 configurado para usar o valor da vari\u00e1vel <code>var.cidr_block</code>, que deve ser fornecido externamente. Esta VPC serve como a base para a rede na qual as sub-redes ser\u00e3o criadas.</p> </li> <li> <p>Recurso <code>aws_subnet</code> chamado <code>main</code>: Este bloco define as sub-redes dentro da VPC criada anteriormente. O atributo <code>count</code> \u00e9 configurado para <code>2</code>, o que significa que duas inst\u00e2ncias deste recurso ser\u00e3o criadas. O <code>vpc_id</code> \u00e9 definido para associar as sub-redes \u00e0 VPC <code>aws_vpc.main</code>. O <code>cidr_block</code> de cada sub-rede \u00e9 obtido da lista <code>local.cidr_block_subnets</code>, usando <code>count.index</code> para acessar os elementos individuais, garantindo que cada sub-rede tenha um bloco CIDR \u00fanico dentro da VPC. Por fim, as sub-redes s\u00e3o etiquetadas com o nome \"Main\".</p> </li> </ol> <p>Este c\u00f3digo ilustra o uso de vari\u00e1veis locais, a fun\u00e7\u00e3o <code>cidrsubnets</code> para c\u00e1lculo autom\u00e1tico de blocos CIDR, e a cria\u00e7\u00e3o de m\u00faltiplas inst\u00e2ncias de um recurso usando o atributo <code>count</code>. A estrutura permite a cria\u00e7\u00e3o de uma VPC e sub-redes relacionadas de forma din\u00e2mica e reutiliz\u00e1vel, facilitando a gest\u00e3o de redes na AWS com o Terraform.</p>"},{"location":"day-3/#lifecycle-e-depends_on","title":"Lifecycle e depends_on","text":"<p>S\u00e3o recursos que podem ser utilizados para controlar a ordem de execu\u00e7\u00e3o dos recursos no Terraform. O <code>lifecycle</code> permite definir configura\u00e7\u00f5es espec\u00edficas para o ciclo de vida de um recurso, como a preven\u00e7\u00e3o de destrui\u00e7\u00e3o acidental ou a configura\u00e7\u00e3o de a\u00e7\u00f5es personalizadas.</p> <p>O <code>lifecycle</code> \u00e9 uma configura\u00e7\u00e3o espec\u00edfica de um recurso. Por exemplo:</p> <pre><code>resource \"aws_instance\" \"web\" {\n  # Configura\u00e7\u00f5es do recurso\n\n  lifecycle {\n    create_before_destroy = true \n    prevent_destroy = true\n        ignore_changes = [\n      tags,\n    ]\n}\n</code></pre> <ul> <li> <p>Create Before Destroy: Esta configura\u00e7\u00e3o garante que um novo recurso seja criado antes que o recurso antigo seja destru\u00eddo. Isso \u00e9 \u00fatil para garantir a disponibilidade cont\u00ednua do recurso durante a atualiza\u00e7\u00e3o ou substitui\u00e7\u00e3o.</p> </li> <li> <p>Prevent Destroy: Esta configura\u00e7\u00e3o impede a destrui\u00e7\u00e3o acidental do recurso. Quando ativada, o Terraform exibir\u00e1 um aviso ao tentar destruir o recurso, solicitando confirma\u00e7\u00e3o antes de prosseguir.</p> </li> <li> <p>Ignore Changes: Esta configura\u00e7\u00e3o permite ignorar altera\u00e7\u00f5es espec\u00edficas em um recurso durante a atualiza\u00e7\u00e3o. Isso pode ser \u00fatil para evitar a interrup\u00e7\u00e3o de servi\u00e7os ou a perda de dados durante a atualiza\u00e7\u00e3o.</p> </li> </ul> <p>Um ponto de ate\u00e7\u00e3o: se o <code>lifecycle</code> for definido no m\u00f3dulo filho e n\u00e3o for definido no m\u00f3dulo pai, o m\u00f3dulo pai n\u00e3o ter\u00e1 controle sobre o ciclo de vida do recurso.</p> <p>O <code>depends_on</code> \u00e9 usado para especificar depend\u00eancias expl\u00edcitas entre recursos, garantindo que um recurso seja criado ou modificado apenas ap\u00f3s a conclus\u00e3o de outro recurso.</p>"},{"location":"day-3/#documentacao-do-terraform","title":"Documenta\u00e7\u00e3o do Terraform","text":"<ul> <li>Terraform CLI</li> <li>Style Guide</li> <li>Sintaxe HCL</li> <li>Resources</li> <li>Providers</li> <li>Variables and Outputs</li> <li>Modules</li> <li>Import</li> <li>State</li> <li>Tutorials</li> <li>Testing HashiCorp Terraform</li> </ul>"},{"location":"day-5/","title":"O que \u00e9 um module source?","text":"<p>Um module source \u00e9 um arquivo que cont\u00e9m um ou mais m\u00f3dulos. Um m\u00f3dulo \u00e9 um conjunto de fun\u00e7\u00f5es, classes e vari\u00e1veis que podem ser importadas e utilizadas em outros arquivos.</p>"},{"location":"day-5/#tipos-de-module-source","title":"Tipos de module source","text":"<p>\u00c9 poss\u00edvel importar m\u00f3dulos de diversas fontes, como:</p>"},{"location":"day-5/#local-paths","title":"Local paths","text":"<p>Normalmente s\u00e3o diret\u00f3rios locais que cont\u00e9m os m\u00f3dulos. Para importar um m\u00f3dulo de um diret\u00f3rio local, basta informar o caminho do diret\u00f3rio no arquivo que deseja importar o m\u00f3dulo.</p> <pre><code>module \"module_name\" {\n  source = \"./path/to/module\"\n}\n</code></pre>"},{"location":"day-5/#terraform-registry","title":"Terraform Registry","text":"<p>No Terraform Registry \u00e9 poss\u00edvel encontrar m\u00f3dulos prontos para serem utilizados. Para importar um m\u00f3dulo do Terraform Registry, basta informar o nome do m\u00f3dulo no arquivo que deseja importar o m\u00f3dulo.</p> <pre><code>module \"module_name\" {\n  source = \"namespace/module_name/registry\"\n}\n</code></pre>"},{"location":"day-5/#git-repositories","title":"Git repositories","text":"<p>S\u00e3o reposit\u00f3rios Git que cont\u00e9m m\u00f3dulos. Para importar um m\u00f3dulo de um reposit\u00f3rio Git, basta informar o URL do reposit\u00f3rio no arquivo que deseja importar o m\u00f3dulo.</p> <pre><code>module \"module_name\" {\n  source = \"git@github.com:nataliagranato/terraform-aws-ec2-module.git\"\n}   \n</code></pre>"},{"location":"day-5/#http-urls","title":"HTTP URLs","text":"<p>S\u00e3o URLs que cont\u00e9m m\u00f3dulos. Para importar um m\u00f3dulo de um URL, basta informar o URL no arquivo que deseja importar o m\u00f3dulo.</p> <pre><code>module \"module_name\" {\n  source = \"https://example.com/path/to/module\"\n}\n</code></pre>"},{"location":"day-5/#s3-buckets","title":"S3 buckets","text":"<p>\u00c9 poss\u00edvel importar m\u00f3dulos de buckets S3. Para importar um m\u00f3dulo de um bucket S3, basta informar o caminho do bucket no arquivo que deseja importar o m\u00f3dulo.</p> <pre><code>module \"module_name\" {\n  source = \"s3::https://s3.amazonaws.com/bucket/path/to/module\"\n}\n</code></pre>"},{"location":"day-5/#modules-in-package-directories","title":"Modules in package directories","text":"<p>Por fim \u00e9 poss\u00edvel importar m\u00f3dulos de diret\u00f3rios de pacotes. Para importar um m\u00f3dulo de um diret\u00f3rio de pacote, basta informar o caminho do diret\u00f3rio no arquivo que deseja importar o m\u00f3dulo.</p> <pre><code>module \"module_name\" {\n  source = \"package::/path/to/module\"\n}\n</code></pre> <p>Em ambientes de produ\u00e7\u00e3o, \u00e9 recomendado utilizar m\u00f3dulos de fontes confi\u00e1veis, como o Terraform Registry, para garantir a seguran\u00e7a e a qualidade dos m\u00f3dulos utilizados.</p>"},{"location":"day-5/#versionamento-semantico","title":"Versionamento sem\u00e2ntico","text":"<p>Para garantir a compatibilidade entre os m\u00f3dulos, \u00e9 recomendado utilizar o versionamento sem\u00e2ntico. O versionamento sem\u00e2ntico \u00e9 um padr\u00e3o de versionamento que define como as vers\u00f5es de um software devem ser incrementadas.</p> <p>O versionamento sem\u00e2ntico \u00e9 composto por tr\u00eas n\u00fameros, separados por pontos, que representam a vers\u00e3o do software. Os n\u00fameros s\u00e3o incrementados da seguinte forma:</p> <ul> <li> <p>O primeiro n\u00famero representa a vers\u00e3o principal (major). Deve ser incrementado quando s\u00e3o feitas altera\u00e7\u00f5es incompat\u00edveis com vers\u00f5es anteriores.</p> </li> <li> <p>O segundo n\u00famero representa a vers\u00e3o secund\u00e1ria (minor). Deve ser incrementado quando s\u00e3o adicionadas funcionalidades de forma compat\u00edvel com vers\u00f5es anteriores.</p> </li> <li> <p>O terceiro n\u00famero representa a vers\u00e3o de corre\u00e7\u00e3o (patch). Deve ser incrementado quando s\u00e3o feitas corre\u00e7\u00f5es de bugs de forma compat\u00edvel com vers\u00f5es anteriores.</p> </li> </ul> <p>Ao utilizar o Github como reposit\u00f3rio de m\u00f3dulos, \u00e9 poss\u00edvel utilizar tags para versionar os m\u00f3dulos. As tags devem seguir o padr\u00e3o <code>vX.Y.Z</code>, onde <code>X</code>, <code>Y</code> e <code>Z</code> s\u00e3o os n\u00fameros da vers\u00e3o. Por exemplo, a tag <code>v0.1.0</code> representa a vers\u00e3o <code>0.1.0</code> do m\u00f3dulo.</p> <pre><code>module \"aws-ec2\" {\n  source      = \"git@github.com:nataliagranato/terraform-aws-ec2-module.git?ref=v0.1.0\"\n  nome        = \"ec2-teste1\"\n  region      = \"us-east-1\"\n  environment = \"prd\"\n}\n</code></pre> <p>Criando uma release especificando tags, \u00e9 poss\u00edvel garantir a compatibilidade entre os m\u00f3dulos e evitar problemas de depend\u00eancias. Al\u00e9m disso, o versionamento sem\u00e2ntico facilita a identifica\u00e7\u00e3o das vers\u00f5es dos m\u00f3dulos e permite que os desenvolvedores saibam exatamente quais vers\u00f5es est\u00e3o sendo utilizadas em seus projetos, caso voc\u00ea realize altera\u00e7\u00f5es em seu m\u00f3dulo, o versionamento garante que os usu\u00e1rios do m\u00f3dulo possam utilizar aquela vers\u00e3o espec\u00edfica, evitando quebras em seus projetos.</p> <p>Outra forma de versionamento \u00e9 utilizando o <code>hash</code> do commit, por\u00e9m, essa forma n\u00e3o \u00e9 recomendada, pois o <code>hash</code> do commit pode ser alterado a qualquer momento, o que pode causar problemas de compatibilidade entre os m\u00f3dulos. Um exemplo de utiliza\u00e7\u00e3o do <code>hash</code> do commit \u00e9:</p> <pre><code>module \"aws-ec2\" {\n  source      = \"git@github.com:nataliagranato/terraform-aws-ec2-module.git?ref=119c58f6a98cf71a1e5195a32f72fc400ecff8ef\"\n  nome        = \"ec2-teste2\"\n  region      = \"us-east-2\"\n  environment = \"dev\"\n}\n</code></pre> <p>Ao executar o comando <code>terraform init</code>, o Terraform ir\u00e1 baixar o m\u00f3dulo especificado no arquivo <code>main.tf</code> e armazen\u00e1-lo no diret\u00f3rio <code>.terraform</code>. Caso o m\u00f3dulo j\u00e1 tenha sido baixado anteriormente, o Terraform ir\u00e1 verificar se a vers\u00e3o do m\u00f3dulo \u00e9 a mesma especificada no arquivo <code>main.tf</code>. Se a vers\u00e3o do m\u00f3dulo for diferente, o Terraform ir\u00e1 baixar a vers\u00e3o correta do m\u00f3dulo e substituir a vers\u00e3o antiga.</p> <p>O output do comando <code>terraform init</code> ir\u00e1 exibir a vers\u00e3o do m\u00f3dulo baixado e o caminho do diret\u00f3rio onde o m\u00f3dulo foi armazenado.</p> <pre><code>Initializing the backend...\n\nSuccessfully configured the backend \"s3\"! Terraform will automatically\nuse this backend unless the backend configuration changes.\nInitializing modules...\nDownloading git::ssh://git@github.com/nataliagranato/terraform-aws-ec2-module.git?ref=v0.1.0 for aws-ec2...\n</code></pre> <p>Voc\u00ea pode ver diversos desenvolvedores que utilizam <code>monorepo</code> para armazenar todos os m\u00f3dulos em um \u00fanico reposit\u00f3rio. Um exemplo de utiliza\u00e7\u00e3o de <code>monorepo</code> \u00e9:</p> <pre><code>Modules em subdiret\u00f3rios\nmodule \"aws-ec2\" {\n  source      = \"git@github.com:nataliagranato/terraform-aws-ec2-module.git//modules/instances?ref=main\"\n  nome        = \"ec2-teste2\"\n  region      = \"us-east-2\"\n  environment = \"dev\"\n}\n</code></pre>"},{"location":"day-5/#utilizando-condicionais-no-codigo","title":"Utilizando condicionais no c\u00f3digo","text":"<p>\u00c9 poss\u00edvel utilizar condicionais no c\u00f3digo para controlar o fluxo de execu\u00e7\u00e3o do Terraform. As condicionais permitem executar blocos de c\u00f3digo com base em condi\u00e7\u00f5es espec\u00edficas.</p>"},{"location":"day-5/#operadores-de-comparacao","title":"Operadores de compara\u00e7\u00e3o","text":"<p>Os operadores de compara\u00e7\u00e3o s\u00e3o utilizados para comparar valores e retornar um resultado booleano. Os operadores de compara\u00e7\u00e3o mais comuns s\u00e3o:</p> <ul> <li> <p><code>==</code> (igual a): Retorna verdadeiro se os valores comparados forem iguais.</p> </li> <li> <p><code>!=</code> (diferente de): Retorna verdadeiro se os valores comparados forem diferentes.</p> </li> <li> <p><code>&gt;</code> (maior que): Retorna verdadeiro se o valor da esquerda for maior que o valor da direita.</p> </li> </ul>"},{"location":"day-5/#um-exemplo-de-condicao","title":"Um exemplo de condi\u00e7\u00e3o","text":"<pre><code>resource \"aws_instance\" \"web\" {\n  count                   = var.environment == \"prod\" ? 2 : 1\n  ami                     = data.aws_ami.ubuntu.id\n  instance_type           = \"t3.micro\"\n  disable_api_termination = true\n  metadata_options {\n    http_tokens = \"required\"\n\n  }\n\n  root_block_device {\n    encrypted = true\n\n  }\n\n  tags = {\n    Name       = var.nome\n    Env        = var.environment\n    Plataforma = data.aws_ami.ubuntu.platform_details\n  }\n}\n</code></pre> <p>A linha <code>count = var.environment == \"prod\" ? 2 : 1</code> usa uma express\u00e3o condicional para determinar quantas inst\u00e2ncias ser\u00e3o criadas. Se a vari\u00e1vel <code>environment</code> for igual a <code>\"prod\"</code>, ent\u00e3o <code>count</code> ser\u00e1 2, criando duas inst\u00e2ncias; caso contr\u00e1rio, ser\u00e1 1, criando apenas uma inst\u00e2ncia. Isso permite flexibilidade na aloca\u00e7\u00e3o de recursos com base no ambiente de implanta\u00e7\u00e3o.</p>"},{"location":"day-5/#utilizando-condicionais-com-modulos","title":"Utilizando condicionais com m\u00f3dulos","text":"<p>\u00c9 poss\u00edvel utilizar condicionais com m\u00f3dulos para controlar a cria\u00e7\u00e3o de recursos com base em condi\u00e7\u00f5es espec\u00edficas. Por exemplo, \u00e9 poss\u00edvel criar um m\u00f3dulo que cria um recurso apenas se uma vari\u00e1vel espec\u00edfica for verdadeira.</p> <pre><code># Defini\u00e7\u00e3o de uma vari\u00e1vel para controlar a cria\u00e7\u00e3o do recurso\nvariable \"criar_recurso\" {\n  description = \"Um booleano que determina se o recurso deve ser criado\"\n  type        = bool\n}\n\n# M\u00f3dulo condicional\nmodule \"meu_recurso_condicional\" {\n  source = \"./caminho/do/modulo\"\n\n  count = var.criar_recurso ? 1 : 0\n\n  # Argumentos do m\u00f3dulo aqui\n}\n\n# Exemplo de uso do m\u00f3dulo com a vari\u00e1vel\n# Para criar o recurso, defina a vari\u00e1vel criar_recurso como true\n# terraform apply -var \"criar_recurso=true\"\n</code></pre> <p>Neste exemplo, o m\u00f3dulo <code>meu_recurso_condicional</code> ser\u00e1 criado apenas se a vari\u00e1vel <code>criar_recurso</code> for verdadeira. Isso permite controlar a cria\u00e7\u00e3o de recursos com base em condi\u00e7\u00f5es espec\u00edficas, tornando o c\u00f3digo mais flex\u00edvel e reutiliz\u00e1vel.</p>"},{"location":"day-5/#utilizando-for_each-em-seu-modulo","title":"Utilizando for_each em seu m\u00f3dulo","text":"<p>O <code>for_each</code> \u00e9 uma fun\u00e7\u00e3o que permite iterar sobre uma cole\u00e7\u00e3o de valores e criar recursos dinamicamente com base nesses valores. Isso \u00e9 \u00fatil quando voc\u00ea deseja criar v\u00e1rios recursos com base em uma lista de valores.</p>"},{"location":"day-5/#um-exemplo-de-uso-do-for_each","title":"Um exemplo de uso do <code>for_each</code>","text":"<pre><code># Defini\u00e7\u00e3o de uma vari\u00e1vel contendo uma lista de valores\nvariable \"instancias\" {\n  description = \"Uma lista de inst\u00e2ncias a serem criadas\"\n  type        = list(object({\n    nome        = string\n    environment = string\n    region      = string\n  }))\n  default = [\n    {\n      nome        = \"instancia1\"\n      environment = \"dev\"\n      region      = \"us-east-1\"\n    },\n    {\n      nome        = \"instancia2\"\n      environment = \"prod\"\n      region      = \"us-west-2\"\n    },\n  ]\n}\n</code></pre> <p>O c\u00f3digo HCL (HashiCorp Configuration Language) abaixo define uma vari\u00e1vel no Terraform chamada <code>instancias</code>. Esta vari\u00e1vel \u00e9 usada para armazenar uma lista de objetos, onde cada objeto representa uma inst\u00e2ncia com atributos espec\u00edficos. Vamos detalhar cada parte do c\u00f3digo:</p> <pre><code># Defini\u00e7\u00e3o de uma vari\u00e1vel contendo uma lista de valores\nvariable \"instancias\" {\n  description = \"Uma lista de inst\u00e2ncias a serem criadas\"\n  type        = list(object({\n    nome        = string\n    environment = string\n    region      = string\n  }))\n  default = [\n    {\n      nome        = \"instancia1\"\n      environment = \"dev\"\n      region      = \"us-east-1\"\n    },\n    {\n      nome        = \"instancia2\"\n      environment = \"prod\"\n      region      = \"us-west-2\"\n    },\n  ]\n}\n</code></pre>"},{"location":"day-5/#explicacao-do-codigo","title":"Explica\u00e7\u00e3o do C\u00f3digo","text":"<ul> <li> <p>variable \"instancias\": Declara uma nova vari\u00e1vel chamada <code>instancias</code>.</p> </li> <li> <p>description: Fornece uma descri\u00e7\u00e3o para a vari\u00e1vel, explicando que ela armazena uma lista de inst\u00e2ncias que ser\u00e3o criadas.</p> </li> <li> <p>type: Define o tipo da vari\u00e1vel como uma lista (<code>list</code>) de objetos (<code>object</code>). Cada objeto na lista deve seguir uma estrutura espec\u00edfica, que inclui tr\u00eas atributos: <code>nome</code>, <code>environment</code>, e <code>region</code>, todos do tipo <code>string</code>.</p> </li> <li> <p>default: Estabelece um valor padr\u00e3o para a vari\u00e1vel <code>instancias</code>. Neste caso, o valor padr\u00e3o \u00e9 uma lista contendo dois objetos, cada um representando uma inst\u00e2ncia com valores espec\u00edficos para <code>nome</code>, <code>environment</code>, e <code>region</code>:</p> </li> <li>O primeiro objeto define uma inst\u00e2ncia chamada <code>instancia1</code>, marcada como um ambiente de desenvolvimento (<code>dev</code>), e localizada na regi\u00e3o <code>us-east-1</code>.</li> <li>O segundo objeto define uma inst\u00e2ncia chamada <code>instancia2</code>, marcada como um ambiente de produ\u00e7\u00e3o (<code>prod</code>), e localizada na regi\u00e3o <code>us-west-2</code>.</li> </ul> <p>Este c\u00f3digo facilita a configura\u00e7\u00e3o de m\u00faltiplas inst\u00e2ncias em diferentes ambientes e regi\u00f5es, permitindo uma abordagem declarativa e reutiliz\u00e1vel para definir recursos no Terraform.</p>"},{"location":"day-6/","title":"O uso de for loop no Terraform","text":"<p>O for loop \u00e9 uma maneira de iterar sobre uma sequ\u00eancia de elementos, como uma lista, tupla, dicion\u00e1rio, conjunto ou string. O loop for \u00e9 usado para executar um bloco de c\u00f3digo v\u00e1rias vezes.</p>"},{"location":"day-6/#exemplo-de-uso","title":"Exemplo de uso","text":"<p>No arquivo de vari\u00e1veis, declare uma vari\u00e1vel do tipo lista com os valores que deseja iterar.</p> <pre><code>variable \"servers\" {\n  type = list\n  default = [\"web1\", \"web2\", \"web3\"]\n}\n</code></pre>"},{"location":"day-6/#utilizando-loops-para-criar-recursos","title":"Utilizando Loops para Criar Recursos","text":"<p>Com a vari\u00e1vel <code>servers</code> definida, podemos agora iterar sobre ela para criar m\u00faltiplas inst\u00e2ncias AWS EC2. Utilizamos o atributo <code>count</code> junto com a fun\u00e7\u00e3o <code>length(var.servers)</code> para determinar o n\u00famero de inst\u00e2ncias a serem criadas. Para cada elemento na lista <code>servers</code>, uma inst\u00e2ncia EC2 ser\u00e1 provisionada.</p> <pre><code>resource \"aws_instance\" \"web\" {\n  count = length(var.servers)\n  ami = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n  tags = {\n    Name = var.servers[count.index]\n  }\n}\n</code></pre> <p>Este exemplo ilustra como voc\u00ea pode utilizar vari\u00e1veis e loops no Terraform para gerenciar recursos de forma din\u00e2mica e eficiente. Atrav\u00e9s da declara\u00e7\u00e3o de vari\u00e1veis e do uso de loops, \u00e9 poss\u00edvel simplificar a configura\u00e7\u00e3o e o provisionamento de infraestrutura na nuvem, tornando o processo mais automatizado e menos propenso a erros.</p>"},{"location":"day-6/#dynamic-blocks","title":"Dynamic Blocks","text":"<p>Se voc\u00ea precisar de mais flexibilidade ao criar recursos com base em vari\u00e1veis, pode usar blocos din\u00e2micos. Os blocos din\u00e2micos permitem que voc\u00ea crie recursos com base em uma lista de objetos, em vez de apenas um valor escalar.</p> <pre><code>resource \"aws_instance\" \"web\" {\n  for_each = toset(var.servers)\n  ami = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n  tags = {\n    Name = each.key\n  }\n}\n</code></pre> <p>O <code>for_each</code> atributo \u00e9 usado para iterar sobre a lista de servidores e criar uma inst\u00e2ncia EC2 para cada um. O <code>each.key</code> \u00e9 usado para acessar a chave do objeto atual na itera\u00e7\u00e3o, que neste caso \u00e9 o nome do servidor.</p>"}]}